


local gradient = surface.GetTextureID("vgui/gradient-d")
local audioFadeInTime = 2
local animationTime = 0.5

surface.CreateFont( "SubTitle", {
	font = "Trebuchet MS",
	extended = false,
	size = ScreenScale(28),
	extended = true,
	weight = 1000,
} )

surface.CreateFont( "MainTitle", {
	font = "Geometria",
	extended = false,
	size = ScreenScale(50),
	extended = true,
	weight = 0,
} )

-- character menu panel
DEFINE_BASECLASS("ixSubpanelParent")
local PANEL = {}

function PANEL:Init()
	self:SetSize(self:GetParent():GetSize())
	self:SetPos(0, 0)

	self.childPanels = {}
	self.subpanels = {}
	self.activeSubpanel = ""

	self.currentDimAmount = 0
	self.currentY = 0
	self.currentScale = 1
	self.currentAlpha = 255
	self.targetDimAmount = 255
	self.targetScale = 0.9
end

function PANEL:Dim(length, callback)
	length = length or animationTime
	self.currentDimAmount = 0

	self:CreateAnimation(length, {
		target = {
			currentDimAmount = self.targetDimAmount,
			currentScale = self.targetScale,
			OnComplete = callback
		},
		easing = "outCubic"
	})

	self:OnDim()
end

function PANEL:Undim(length, callback)
	length = length or animationTime
	self.currentDimAmount = self.targetDimAmount

	self:CreateAnimation(length, {
		target = {
			currentDimAmount = 0,
			currentScale = 1
		},
		easing = "outCubic",
		OnComplete = callback
	})

	self:OnUndim()
end

function PANEL:OnDim()
end

function PANEL:OnUndim()
end

function PANEL:Paint(width, height)
	local amount = self.currentDimAmount

	BaseClass.Paint(self, width, height)

	if (amount > 15) then
		local color = Color(0, 0, 0, amount-15)

		surface.SetDrawColor(color)
		surface.DrawRect(0, 0, width, height)
	end
end

vgui.Register("ixCharMenuPanel", PANEL, "ixSubpanelParent")

-- character menu main button list
PANEL = {}

function PANEL:Init()
	local parent = self:GetParent()
	self:SetSize(parent:GetWide(), 64)
end

function PANEL:Add(name)
	local panel = vgui.Create(name, self)
	panel:SetFont("ixSmallFont")
	panel:SetContentAlignment(5)
	panel.SetText = function(this, text, noTranslation)
		surface.SetFont("ixSmallFont")
		DButton.SetText(this, noTranslation and text:upper() or L(text):upper())

		local w, h = surface.GetTextSize(L(text):upper())
		this:SetSize(w + 64, h + 32)
	end
	panel:SetBackgroundColor(ix.config.Get("color"))
	panel:Dock(LEFT)
	panel.Paint = function(this, width, height)
		local alpha = this.currentBackgroundAlpha
		local active = Lerp(alpha/255, 0, 20)

		draw.NoTexture()
		surface.SetDrawColor(this.backgroundColor)
		surface.DrawTexturedRectRotated( 0, 0, width*active, height*active, 45 )
	end

	return panel
end

vgui.Register("ixCharMenuButtonList", PANEL, "Panel")

-- main character menu panel
PANEL = {}

AccessorFunc(PANEL, "bUsingCharacter", "UsingCharacter", FORCE_BOOL)

function PANEL:Init()
	local parent = self:GetParent()
	local padding = self:GetPadding()
	local halfWidth = ScrW() * 0.5
	local halfPadding = padding * 0.5
	local bHasCharacter = #ix.characters > 0

	self.bUsingCharacter = LocalPlayer().GetCharacter and LocalPlayer():GetCharacter()
	--self:DockPadding(padding, padding, padding, padding)

	local infoLabel = self:Add("DLabel")
	infoLabel:SetTextColor(Color(255, 255, 255, 25))
	infoLabel:SetFont("ixMenuMiniFont")
	infoLabel:SetText(L("helix") .. " " .. GAMEMODE.Version)
	infoLabel:SizeToContents()
	infoLabel:SetPos(ScrW() - infoLabel:GetWide() - 4, ScrH() - infoLabel:GetTall() - 4)

	local logoPanel = self:Add("Panel")
	logoPanel:SetSize(ScrW(), ScrH() * 0.25)
	logoPanel:SetPos(0, (ScrH() * 0.5)-(ScrH() * 0.25/2))
	logoPanel.Paint = function(panel, width, height)
		local newHeight = Lerp(1 - (self.currentDimAmount / 255), 0, height)
		local y = height * 0.5 - newHeight * 0.5
		local _, screenY = panel:LocalToScreen(0, 0)
		screenY = screenY + y
		render.SetScissorRect(0, screenY, width, screenY+newHeight, true)

		for _, v in ipairs(panel:GetChildren()) do
			v:PaintManual()
		end

		render.SetScissorRect(0, 0, 0, 0, false)
	end

	-- draw schema logo material instead of text if available
	local logo = Schema.logo and ix.util.GetMaterial(Schema.logo)

	if (logo and !logo:IsError()) then
		local logoImage = logoPanel:Add("DImage")
		logoImage:SetMaterial(logo)
		logoImage:SetSize(halfWidth, halfWidth * logo:Height() / logo:Width())
		logoImage:SetPos(halfWidth - logoImage:GetWide() * 0.5, halfPadding)
		logoImage:SetPaintedManually(true)

		logoPanel:SetTall(logoImage:GetTall() + padding)
	else
		local newHeight = padding
		local subtitle = L2("schemaDesc") or Schema.description or "───── R P G ─────"

		local titleLabel = logoPanel:Add("DLabel")
		titleLabel:SetTextColor(color_white)
		titleLabel:SetFont("MainTitle")
		titleLabel:SetText(" TARABANSK RED")
		titleLabel:SizeToContents()
		titleLabel:SetPos(halfWidth - titleLabel:GetWide() * 0.5, halfPadding-halfPadding)
		titleLabel:SetPaintedManually(true)
		newHeight = newHeight + titleLabel:GetTall()

		if (subtitle) then
			local subtitleLabel = logoPanel:Add("DLabel")
			subtitleLabel:SetTextColor(color_white)
			subtitleLabel:SetFont("SubTitle")
			subtitleLabel:SetText(" R P G")
			subtitleLabel:SizeToContents()
			subtitleLabel:SetPos(halfWidth - subtitleLabel:GetWide() * 0.5, 0)
			subtitleLabel:MoveBelow(titleLabel)
			subtitleLabel:SetPaintedManually(true)
			newHeight = newHeight + subtitleLabel:GetTall()
		end

		logoPanel:SetTall(newHeight)
	end

	-- button list
	self.buttons = self:Add("Panel")
	self.buttons:SetSize(self:GetWide(), 64)
	self.buttons:Dock(TOP)
	self.buttons:SetPaintedManually(true)
	self.buttons.Paint = function(this, width, height)
		local newHeight = Lerp(1 - (self.currentDimAmount / 255), 0, height)
		render.SetScissorRect(0, 0, width, newHeight, true)

		surface.SetDrawColor(Color(0, 0, 0, 225))
		surface.DrawRect(0, 0, width, newHeight)

		for _, v in ipairs(this:GetChildren()) do
			v:PaintManual()
		end

		render.SetScissorRect(0, 0, 0, 0, false)
	end

	self.mainButtonList = self.buttons:Add("ixCharMenuButtonList")
	self.mainButtonList:Dock(FILL)
	self.mainButtonList:SetPaintedManually(true)

	-- create character button
	local createButton = self.mainButtonList:Add("ixMenuButton")
	createButton:SetText("Создать персонажа")
	createButton.DoClick = function()
		local maximum = hook.Run("GetMaxPlayerCharacter", LocalPlayer()) or ix.config.Get("maxCharacters", 5)
		-- don't allow creation if we've hit the character limit
		if (#ix.characters >= maximum) then
			self:GetParent():ShowNotice(3, L("maxCharacters"))
			return
		end

		self:Dim()
		parent.newCharacterPanel:SetActiveSubpanel("faction", 0)
		parent.newCharacterPanel:SlideUp()
	end

	-- load character button
	self.loadButton = self.mainButtonList:Add("ixMenuButton")
	self.loadButton:SetText("Загрузить персонажа")
	self.loadButton.DoClick = function()
		self:Dim()
		parent.loadCharacterPanel:SlideUp()
	end

	if (!bHasCharacter) then
		self.loadButton:SetDisabled(true)
	end

	local contextURL = "Content"
	local contextText = "Контент"

	self.contentButton = self.mainButtonList:Add("ixMenuButton")
	self.contentButton:SetText(contextText, true)
	self.contentButton.DoClick = function()
		gui.OpenURL(contextURL)
	end

	-- community button
	local extraURL = ix.config.Get("communityURL", "")
	local extraText = ix.config.Get("communityText", "@community")

	if (extraURL != "" and extraText != "") then
		if (extraText:sub(1, 1) == "@") then
			extraText = L(extraText:sub(2))
		end

		self.extraButton = self.mainButtonList:Add("ixMenuButton")
		self.extraButton:Dock(FILL)
		self.extraButton:SetContentAlignment(4)
		self.extraButton.Paint = function(this, width, height)
			local alpha = this.currentBackgroundAlpha
			derma.SkinFunc("DrawImportantBackground", 0, 0, width, height, ColorAlpha(this.backgroundColor, alpha))
			surface.SetDrawColor(Color(255,255,255,33))
			surface.DrawRect(0, 0, 1, height)
		end
		self.extraButton:SetText(extraText, true)
		self.extraButton.DoClick = function()
			gui.OpenURL(extraURL)
		end
	end

	-- leave/return button
	self.returnButton = self.mainButtonList:Add("ixMenuButton")
	self.returnButton.SetText = function(this, text, noTranslation)
		DButton.SetText(this, noTranslation and text or L(text))
	end
	self.returnButton:SetText("G")
	self.returnButton:SetFont("ixIconsMenuButton")
	self.returnButton:SetZPos(-99)
	self.returnButton.PaintOver = function(this, width, height)
		surface.SetDrawColor(Color(255,255,255,33))
		surface.DrawRect(width-1, 0, 1, height)
	end
	self:UpdateReturnButton()
	self.returnButton.DoClick = function()
		if (self.bUsingCharacter) then
			parent:Close()
		else
			RunConsoleCommand("disconnect")
		end
	end

	if (self.bUsingCharacter) then
		self.characterButton = vgui.Create("ixMenuButton", self.mainButtonList)
		self.characterButton.SetText = function(this, text, noTranslation)
			DButton.SetText(this, noTranslation and text or L(text))
		end
		self.characterButton:SetText("t")
		self.characterButton:SetFont("ixIconsMenuButton")
		self.characterButton:SetContentAlignment(5)
		self.characterButton:Dock(RIGHT)
		self.characterButton:SetBackgroundColor(ix.config.Get("color"))
		self.characterButton.DoClick = function()
			if (self.bUsingCharacter) then
				parent:Close()
				vgui.Create("ixMenu")
			end
		end
		self.characterButton.Paint = function(this, width, height)
			local alpha = this.currentBackgroundAlpha
			local active = Lerp(alpha/255, 0, 20)

			draw.NoTexture()
			surface.SetDrawColor(this.backgroundColor)
			surface.DrawTexturedRectRotated( 0, 0, width*active, height*active, 45 )
		end
	end
end

function PANEL:UpdateReturnButton(bValue)
	if (bValue == nil) then
		bValue = self.bUsingCharacter

		if (IsValid(self.characterButton)) then
			self.characterButton:SetVisible(bValue)
		end
	end
end

function PANEL:OnDim()
	-- disable input on this panel since it will still be in the background while invisible - prone to stray clicks if the
	-- panels overtop slide out of the way
	self:SetMouseInputEnabled(false)
	self:SetKeyboardInputEnabled(false)
end

function PANEL:OnUndim()
	self:SetMouseInputEnabled(true)
	self:SetKeyboardInputEnabled(true)

	-- we may have just deleted a character so update the status of the return button
	self.bUsingCharacter = LocalPlayer().GetCharacter and LocalPlayer():GetCharacter()
	self:UpdateReturnButton()
end

function PANEL:OnClose()
	for _, v in pairs(self:GetChildren()) do
		if (IsValid(v)) then
			v:SetVisible(false)
		end
	end
end

function PANEL:PerformLayout(width, height)
	local padding = self:GetPadding()

	self.mainButtonList:SetPos(padding, height - self.mainButtonList:GetTall() - padding)
end

vgui.Register("ixCharMenuMain", PANEL, "ixCharMenuPanel")

-- container panel
PANEL = {}

function PANEL:Init()
	if (IsValid(ix.gui.loading)) then
		ix.gui.loading:Remove()
	end

	if (IsValid(ix.gui.characterMenu)) then
		if (IsValid(ix.gui.characterMenu.channel)) then
			ix.gui.characterMenu.channel:Stop()
		end

		ix.gui.characterMenu:Remove()
	end

	self:SetSize(ScrW(), ScrH())
	self:SetPos(0, 0)

	-- main menu panel
	self.mainPanel = self:Add("ixCharMenuMain")

	-- new character panel
	self.newCharacterPanel = self:Add("ixCharMenuNew")
	self.newCharacterPanel:SlideDown(0)

	-- load character panel
	self.loadCharacterPanel = self:Add("ixCharMenuLoad")
	self.loadCharacterPanel:SlideDown(0)

	-- notice bar
	self.notice = nil

	-- finalization
	self:MakePopup()
	self.currentAlpha = 255
	self.volume = 0

	ix.gui.characterMenu = self

	if (!IsValid(ix.gui.intro)) then
		self:PlayMusic()
	end

	hook.Run("OnCharacterMenuCreated", self)
end

function PANEL:PlayMusic()
	local path = "sound/" .. ix.config.Get("music")
	local url = path:match("http[s]?://.+")
	local play = url and sound.PlayURL or sound.PlayFile
	path = url and url or path

	play(path, "noplay", function(channel, error, message)
		if (!IsValid(channel)) then
			return
		end

		channel:SetVolume(self.volume or 0)
		channel:Play()

		self.channel = channel

		self:CreateAnimation(audioFadeInTime, {
			index = 10,
			target = {volume = 1},

			Think = function(animation, panel)
				if (IsValid(panel.channel)) then
					panel.channel:SetVolume(self.volume * 0.5)
				end
			end
		})
	end)
end

function PANEL:ShowNotice(type, text)
	--self.notice:SetType(type)
	--self.notice:SetText(text)
	--self.notice:Show()
end

function PANEL:HideNotice()
	if (IsValid(self.notice) and !self.notice:GetHidden()) then
		self.notice:Slide("up", 0.5, true)
	end
end

function PANEL:OnCharacterDeleted(character)
	if (#ix.characters == 0) then
		self.mainPanel.loadButton:SetDisabled(true)
		self.mainPanel:Undim() -- undim since the load panel will slide down
	else
		self.mainPanel.loadButton:SetDisabled(false)
	end

	self.loadCharacterPanel:OnCharacterDeleted(character)
end

function PANEL:OnCharacterLoadFailed(error)
	self.loadCharacterPanel:SetMouseInputEnabled(true)
	self.loadCharacterPanel:SlideUp()
	self:ShowNotice(3, error)
end

function PANEL:IsClosing()
	return self.bClosing
end

function PANEL:Close(bFromMenu)
	self.bClosing = true
	self.bFromMenu = bFromMenu

	local fadeOutTime = animationTime * 8

	self:CreateAnimation(fadeOutTime, {
		index = 1,
		target = {currentAlpha = 0},

		Think = function(animation, panel)
			panel:SetAlpha(panel.currentAlpha)
		end,

		OnComplete = function(animation, panel)
			panel:Remove()
		end
	})

	self:CreateAnimation(fadeOutTime - 0.1, {
		index = 10,
		target = {volume = 0},

		Think = function(animation, panel)
			if (IsValid(panel.channel)) then
				panel.channel:SetVolume(self.volume * 0.5)
			end
		end,

		OnComplete = function(animation, panel)
			if (IsValid(panel.channel)) then
				panel.channel:Stop()
				panel.channel = nil
			end
		end
	})

	-- hide children if we're already dimmed
	if (bFromMenu) then
		for _, v in pairs(self:GetChildren()) do
			if (IsValid(v)) then
				v:SetVisible(false)
			end
		end
	else
		-- fade out the main panel quicker because it significantly blocks the screen
		self.mainPanel.currentAlpha = 255

		self.mainPanel:CreateAnimation(animationTime * 2, {
			target = {currentAlpha = 0},
			easing = "outQuint",

			Think = function(animation, panel)
				panel:SetAlpha(panel.currentAlpha)
			end,

			OnComplete = function(animation, panel)
				panel:SetVisible(false)
			end
		})
	end

	-- relinquish mouse control
	self:SetMouseInputEnabled(false)
	self:SetKeyboardInputEnabled(false)
	gui.EnableScreenClicker(false)
end

function PANEL:Paint(width, height)
	derma.SkinFunc("PaintMenuBackground", self, width, height, self.currentAlpha / 255)
	surface.SetTexture(gradient)
	surface.SetDrawColor(0, 0, 0, 255)
	surface.DrawTexturedRect(0, 0, width, height)

	if (!ix.option.Get("cheapBlur", false)) then
		surface.SetDrawColor(0, 0, 0, 150)
		surface.DrawTexturedRect(0, 0, width, height)
		ix.util.DrawBlur(self, Lerp((self.currentAlpha - 200) / 255, 0, 10))
	end
end

function PANEL:PaintOver(width, height)
	if (self.bClosing and self.bFromMenu) then
		surface.SetDrawColor(color_black)
		surface.DrawRect(0, 0, width, height)
	end
end

vgui.Register("ixCharMenu", PANEL, "EditablePanel")

if (IsValid(ix.gui.characterMenu)) then
	ix.gui.characterMenu:Remove()

	--TODO: REMOVE ME
	ix.gui.characterMenu = vgui.Create("ixCharMenu")
end